{"version":3,"sources":["webpack://iidx-lambda/./src/hello/hello.ts","webpack://iidx-lambda/external \"aws-xray-sdk-core\"","webpack://iidx-lambda/webpack/bootstrap","webpack://iidx-lambda/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4FAA4C;AAc/B,eAAO,GAAG,UACrB,KAAsB,EACtB,OAAgB;;;QAEV,OAAO,GAAG,IAAI,2BAAO,CAAC,eAAe,CAAC,CAAC;QAC7C,IAAI;YACI,IAAI,GAAe,EAAE,KAAK,SAAE,OAAO,WAAE,OAAO,EAAE,cAAc,EAAE,CAAC;YAErE,sBAAO;oBACL,UAAU,EAAE,GAAG;oBACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;iBAC3B,EAAC;YAEF,+CAA+C;YAC/C,wDAAwD;YACxD,0CAA0C;SAC3C;QAAC,OAAO,GAAG,EAAE;YACZ,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACtB,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;SACtB;gBAAS;YACR,OAAO,CAAC,KAAK,EAAE,CAAC;SACjB;;;KACF,CAAC;;;;;;;;;;;;;;ACpCF,+C;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;UCrBA;UACA;UACA;UACA","file":"src/hello/hello.js","sourcesContent":["import { Segment } from 'aws-xray-sdk-core';\nimport { APIGatewayEvent, Context } from 'aws-lambda';\n\ninterface APIGatewayJSONResponse {\n  statusCode: number;\n  body: string;\n}\n\ninterface BodyObject {\n  event: APIGatewayEvent;\n  context: Context;\n  message: string;\n}\n\nexport const handler = async (\n  event: APIGatewayEvent,\n  context: Context,\n): Promise<APIGatewayJSONResponse> => {\n  const segment = new Segment('hello.handler');\n  try {\n    const body: BodyObject = { event, context, message: 'Hello World!' };\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify(body),\n    };\n\n    // Yeah we know we cant reach this but its good\n    // practice to keep error handling in all our functions!\n    // eslint-disable-next-line no-unreachable\n  } catch (err) {\n    segment.addError(err);\n    throw new Error(err);\n  } finally {\n    segment.close();\n  }\n};\n","module.exports = require(\"aws-xray-sdk-core\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(\"./src/hello/hello.ts\");\n"],"sourceRoot":""}